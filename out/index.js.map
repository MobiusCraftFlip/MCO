{"version":3,"sources":["../src/index.ts"],"sourcesContent":["require(\"dotenv\").config()\n\nimport RedisStore from \"connect-redis\"\nimport session from \"express-session\"\nimport {createClient} from \"redis\"\n\nconst express = require(\"express\");\nconst app = express();\nconst port = process.env.PORT || 8080;\nconst mongoose = require(\"mongoose\");\nconst passport = require(\"passport\");\nconst flash = require(\"connect-flash\");\nconst morgan = require(\"morgan\");\nconst cookieParser = require(\"cookie-parser\");\nconst bodyParser = require(\"body-parser\");\nconst path = require(\"path\");\n\nconst User = require(\"./models/user.model\").default;\nconst dbConfig = require(\"./config/database.config\");\nconst { randomBytes } = require(\"crypto\");\nconst { refreshFlags } = require(\"./models/flags.model\");\n\n// Configuration\nmongoose.connect(dbConfig.url, {\n  useNewUrlParser: true\n}).then(() => {\n  refreshFlags\n})\nrequire(\"./config/passport.config\")(passport);\n\n// Express setup\napp.use(morgan(\"dev\"));\napp.use(cookieParser());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(bodyParser.json());\napp.set(\"view engine\", \"ejs\");\napp.set('view options', {root: path.join(__dirname, \"..\",\"views\")});\n\napp.set(\"views\", path.join(__dirname, \"..\",\"views\"));\napp.use(express.static(__dirname + \"/../public\"));\n\nlet redisClient = createClient({\n  url: process.env.REDIS_URL\n})\nredisClient.connect().catch(console.error)\n\n// Initialize store.\nlet redisStore = new RedisStore({\n  client: redisClient,\n  prefix: \"mco:\",\n})\n\n// Passport setup\napp.use(session({\n  store: redisStore,\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    maxAge: 60*60*1000,\n    // sameSite: true,\n    // secure: true,\n  }\n}));\napp.use(passport.initialize());\napp.use(passport.session());\napp.use(flash());\n\n// Routes\nrequire(\"./routes/routes\")(app, passport, User);\n\n// Launch server\napp.listen(port, () => console.log(`server started on port ${port}`));"],"names":["require","config","express","app","port","process","env","PORT","mongoose","passport","flash","morgan","cookieParser","bodyParser","path","User","default","dbConfig","randomBytes","refreshFlags","connect","url","useNewUrlParser","then","use","urlencoded","extended","json","set","root","join","__dirname","static","redisClient","createClient","REDIS_URL","catch","console","error","redisStore","RedisStore","client","prefix","session","store","secret","SESSION_SECRET","resave","saveUninitialized","cookie","maxAge","initialize","listen","log"],"mappings":";;;;qEAEuB;uEACH;uBACO;;;;;;AAJ3BA,QAAQ,UAAUC,MAAM;AAMxB,MAAMC,UAAUF,QAAQ;AACxB,MAAMG,MAAMD;AACZ,MAAME,OAAOC,QAAQC,GAAG,CAACC,IAAI,IAAI;AACjC,MAAMC,WAAWR,QAAQ;AACzB,MAAMS,WAAWT,QAAQ;AACzB,MAAMU,QAAQV,QAAQ;AACtB,MAAMW,SAASX,QAAQ;AACvB,MAAMY,eAAeZ,QAAQ;AAC7B,MAAMa,aAAab,QAAQ;AAC3B,MAAMc,OAAOd,QAAQ;AAErB,MAAMe,OAAOf,QAAQ,uBAAuBgB,OAAO;AACnD,MAAMC,WAAWjB,QAAQ;AACzB,MAAM,EAAEkB,WAAW,EAAE,GAAGlB,QAAQ;AAChC,MAAM,EAAEmB,YAAY,EAAE,GAAGnB,QAAQ;AAEjC,gBAAgB;AAChBQ,SAASY,OAAO,CAACH,SAASI,GAAG,EAAE;IAC7BC,iBAAiB;AACnB,GAAGC,IAAI,CAAC;IACNJ;AACF;AACAnB,QAAQ,4BAA4BS;AAEpC,gBAAgB;AAChBN,IAAIqB,GAAG,CAACb,OAAO;AACfR,IAAIqB,GAAG,CAACZ;AACRT,IAAIqB,GAAG,CAACX,WAAWY,UAAU,CAAC;IAC5BC,UAAU;AACZ;AACAvB,IAAIqB,GAAG,CAACX,WAAWc,IAAI;AACvBxB,IAAIyB,GAAG,CAAC,eAAe;AACvBzB,IAAIyB,GAAG,CAAC,gBAAgB;IAACC,MAAMf,KAAKgB,IAAI,CAACC,WAAW,MAAK;AAAQ;AAEjE5B,IAAIyB,GAAG,CAAC,SAASd,KAAKgB,IAAI,CAACC,WAAW,MAAK;AAC3C5B,IAAIqB,GAAG,CAACtB,QAAQ8B,MAAM,CAACD,YAAY;AAEnC,IAAIE,cAAcC,IAAAA,mBAAY,EAAC;IAC7Bb,KAAKhB,QAAQC,GAAG,CAAC6B,SAAS;AAC5B;AACAF,YAAYb,OAAO,GAAGgB,KAAK,CAACC,QAAQC,KAAK;AAEzC,oBAAoB;AACpB,IAAIC,aAAa,IAAIC,qBAAU,CAAC;IAC9BC,QAAQR;IACRS,QAAQ;AACV;AAEA,iBAAiB;AACjBvC,IAAIqB,GAAG,CAACmB,IAAAA,uBAAO,EAAC;IACdC,OAAOL;IACPM,QAAQxC,QAAQC,GAAG,CAACwC,cAAc;IAClCC,QAAQ;IACRC,mBAAmB;IACnBC,QAAQ;QACNC,QAAQ,KAAG,KAAG;IAGhB;AACF;AACA/C,IAAIqB,GAAG,CAACf,SAAS0C,UAAU;AAC3BhD,IAAIqB,GAAG,CAACf,SAASkC,OAAO;AACxBxC,IAAIqB,GAAG,CAACd;AAER,SAAS;AACTV,QAAQ,mBAAmBG,KAAKM,UAAUM;AAE1C,gBAAgB;AAChBZ,IAAIiD,MAAM,CAAChD,MAAM,IAAMiC,QAAQgB,GAAG,CAAC,CAAC,uBAAuB,EAAEjD,KAAK,CAAC"}