{"version":3,"sources":["../../src/models/user.model.ts"],"sourcesContent":["import mongoose, { Schema, Types } from \"mongoose\"\nimport bcrypt from \"bcrypt\"\nimport {render} from \"ejs\"\n\nexport interface IUserSchema {\n  name: string,\n  username: string,\n  email: string,\n  password: string,\n  description: string,\n\n  roblox_id: string,\n  roblox_username: string,\n  roblox_displayname: string,\n\n\n  discord_id: string,\n  discord_username: string,\n  discord_displayname: string,\n\n  flags: string[],\n}\n\nlet userSchema = new Schema<IUserSchema>({\n  name: String,\n  username: String,\n  description: String,\n  email: String,\n  password: String,\n\n  roblox_id: String,\n  roblox_username: String,\n  roblox_displayname: String,\n\n\n  discord_id: String,\n  discord_username: String,\n  discord_displayname: String,\n\n  flags: [String],\n})\n\n// Methods\nuserSchema.methods.generateHash = (password: string) => bcrypt.hashSync(password, 10)\n\nuserSchema.methods.validatePassword = function (password: string) {\n  return bcrypt.compareSync(password, this.password)\n}\n\n\n// const textInput = (name: string, value?: string) => `<b>${\"\"}</b><input class=\"input\" type=\"text\" name=${name} value=\"${value ? value :  \"\"}\"></input>`\nconst textInput = (name: string, value?: string) => render(`<b>${visableNames[name]}</b><input class=\"input\" type=\"text\" name=\"<%= name %>\" value=\"<%= value ? value :  ''%>\"></input>`, {name,value})\n\nexport const user_editable = {\n  description: (u) => textInput(\"description\", u.description)\n} as {[key: string]: (u: IUserSchema) => string}\n\nexport const user_viewable = {\n  email: \"Email\",\n  roblox_id: \"\"\n}\n\nexport const sudo_editable = {\n  description: (u) => textInput(\"description\", u.description),\n  email: (u) => textInput(\"email\", u.email),\n  roblox_id: (u) => textInput(\"roblox_id\", u.roblox_id),\n  roblox_username: (u) => textInput(\"roblox_username\", u.roblox_username),\n  roblox_displayname: (u) => textInput(\"roblox_displayname\", u.roblox_displayname),\n  discord_id: (u) => textInput(\"discord_id\", u.discord_id),\n  discord_username: (u) => textInput(\"discord_username\", u.discord_username),\n  discord_displayname: (u) => textInput(\"discord_displayname\", u.discord_displayname),\n  flags: () => \"\",\n} as {[key: string]: (u: IUserSchema) => string}\n\nexport const visableNames = {\n  name: \"Name\",\n  username: \"Username\",\n  description: \"Bio\",\n  email: \"Email\",\n  password: \"Password\",\n\n  roblox_id: \"Roblox UserID\",\n  roblox_username: \"Roblox Username\",\n  roblox_displayname: \"Roblox Displayname\",\n\n\n  discord_id: \"Discord Userid\",\n  discord_username: \"Discord Username\",\n  discord_displayname: \"Discord Displayname\",\n\n  flags: \"Flags\",\n} as  {[key: string]: string}\n\nfunction memorise<A,R>(func: (n: A) => Promise<R>)  {\n  const results : {[key:string]: R}= {};\n  return async (args: A) => {\n    const argsKey = JSON.stringify(args);\n    if (!results[argsKey]) {\n      results[argsKey] = await func(args);\n    }\n    return results[argsKey];\n  };\n};\n\nconst UserModel = mongoose.model(\"user\", userSchema)\n\nconst getUsernameFromId = memorise(async (id: string | Types.ObjectId) => {\n  return (await UserModel.findById(id).exec())?.username\n})\n\nexport {getUsernameFromId}\n\nexport default UserModel"],"names":["getUsernameFromId","sudo_editable","user_editable","user_viewable","visableNames","userSchema","Schema","name","String","username","description","email","password","roblox_id","roblox_username","roblox_displayname","discord_id","discord_username","discord_displayname","flags","methods","generateHash","bcrypt","hashSync","validatePassword","compareSync","textInput","value","render","u","memorise","func","results","args","argsKey","JSON","stringify","UserModel","mongoose","model","id","findById","exec"],"mappings":"2MAgHA,OAAwB,mBAAxB,UAFQA,iBAAiB,mBAAjBA,mBAhDKC,aAAa,mBAAbA,eATAC,aAAa,mBAAbA,eAIAC,aAAa,mBAAbA,eAiBAC,YAAY,mBAAZA,kEA1E2B,4DACrB,8BACE,ijCAqBrB,IAAIC,WAAa,IAAIC,gBAAM,CAAc,CACvCC,KAAMC,OACNC,SAAUD,OACVE,YAAaF,OACbG,MAAOH,OACPI,SAAUJ,OAEVK,UAAWL,OACXM,gBAAiBN,OACjBO,mBAAoBP,OAGpBQ,WAAYR,OACZS,iBAAkBT,OAClBU,oBAAqBV,OAErBW,MAAO,CAACX,OAAO,AACjB,EAGAH,CAAAA,WAAWe,OAAO,CAACC,YAAY,CAAG,AAACT,UAAqBU,eAAM,CAACC,QAAQ,CAACX,SAAU,GAElFP,CAAAA,WAAWe,OAAO,CAACI,gBAAgB,CAAG,SAAUZ,QAAgB,EAC9D,OAAOU,eAAM,CAACG,WAAW,CAACb,SAAU,IAAI,CAACA,QAAQ,CACnD,EAIA,MAAMc,UAAY,CAACnB,KAAcoB,QAAmBC,GAAAA,WAAM,EAAC,CAAC,GAAG,EAAExB,YAAY,CAACG,KAAK,CAAC,kGAAkG,CAAC,CAAE,CAACA,KAAKoB,KAAK,GAE7L,MAAMzB,cAAgB,CAC3BQ,YAAa,AAACmB,GAAMH,UAAU,cAAeG,EAAEnB,WAAW,CAC5D,EAEO,MAAMP,cAAgB,CAC3BQ,MAAO,QACPE,UAAW,EACb,EAEO,MAAMZ,cAAgB,CAC3BS,YAAa,AAACmB,GAAMH,UAAU,cAAeG,EAAEnB,WAAW,EAC1DC,MAAO,AAACkB,GAAMH,UAAU,QAASG,EAAElB,KAAK,EACxCE,UAAW,AAACgB,GAAMH,UAAU,YAAaG,EAAEhB,SAAS,EACpDC,gBAAiB,AAACe,GAAMH,UAAU,kBAAmBG,EAAEf,eAAe,EACtEC,mBAAoB,AAACc,GAAMH,UAAU,qBAAsBG,EAAEd,kBAAkB,EAC/EC,WAAY,AAACa,GAAMH,UAAU,aAAcG,EAAEb,UAAU,EACvDC,iBAAkB,AAACY,GAAMH,UAAU,mBAAoBG,EAAEZ,gBAAgB,EACzEC,oBAAqB,AAACW,GAAMH,UAAU,sBAAuBG,EAAEX,mBAAmB,EAClFC,MAAO,IAAM,EACf,EAEO,MAAMf,aAAe,CAC1BG,KAAM,OACNE,SAAU,WACVC,YAAa,MACbC,MAAO,QACPC,SAAU,WAEVC,UAAW,gBACXC,gBAAiB,kBACjBC,mBAAoB,qBAGpBC,WAAY,iBACZC,iBAAkB,mBAClBC,oBAAqB,sBAErBC,MAAO,OACT,EAEA,SAASW,SAAcC,IAA0B,EAC/C,MAAMC,QAA6B,CAAC,EACpC,OAAO,MAAOC,OACZ,MAAMC,QAAUC,KAAKC,SAAS,CAACH,MAC/B,GAAI,CAACD,OAAO,CAACE,QAAQ,CAAE,CACrBF,OAAO,CAACE,QAAQ,CAAG,MAAMH,KAAKE,KAChC,CACA,OAAOD,OAAO,CAACE,QAAQ,AACzB,CACF,CAEA,MAAMG,UAAYC,iBAAQ,CAACC,KAAK,CAAC,OAAQlC,YAEzC,MAAML,kBAAoB8B,SAAS,MAAOU,KACxC,MAAQ,CAAA,MAAMH,UAAUI,QAAQ,CAACD,IAAIE,IAAI,EAAC,GAAIjC,QAChD,SAIA,SAAe4B"}