{"version":3,"sources":["../../src/models/user.model.ts"],"sourcesContent":["import mongoose, { Schema, Types } from \"mongoose\"\nimport bcrypt from \"bcrypt\"\n\n\nexport interface IUserSchema {\n  name: string,\n  username: string,\n  email: string,\n  password: string,\n\n  roblox_id: string,\n  roblox_username: string,\n  roblox_displayname: string,\n\n\n  discord_id: string,\n  discord_username: string,\n  discord_displayname: string,\n\n  flags: string[],\n}\n\nlet userSchema = new Schema<IUserSchema>({\n  name: String,\n  username: String,\n  email: String,\n  password: String,\n\n  roblox_id: String,\n  roblox_username: String,\n  roblox_displayname: String,\n\n\n  discord_id: String,\n  discord_username: String,\n  discord_displayname: String,\n\n  flags: [String],\n})\n\n// Methods\nuserSchema.methods.generateHash = (password: string) => bcrypt.hashSync(password, 10)\n\nuserSchema.methods.validatePassword = function (password: string) {\n  return bcrypt.compareSync(password, this.password)\n}\n\nexport = mongoose.model(\"user\", userSchema)"],"names":["userSchema","Schema","name","String","username","email","password","roblox_id","roblox_username","roblox_displayname","discord_id","discord_username","discord_displayname","flags","methods","generateHash","bcrypt","hashSync","validatePassword","compareSync","mongoose","model"],"mappings":";kEAAwC;+DACrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBnB,IAAIA,aAAa,IAAIC,gBAAM,CAAc;IACvCC,MAAMC;IACNC,UAAUD;IACVE,OAAOF;IACPG,UAAUH;IAEVI,WAAWJ;IACXK,iBAAiBL;IACjBM,oBAAoBN;IAGpBO,YAAYP;IACZQ,kBAAkBR;IAClBS,qBAAqBT;IAErBU,OAAO;QAACV;KAAO;AACjB;AAEA,UAAU;AACVH,WAAWc,OAAO,CAACC,YAAY,GAAG,CAACT,WAAqBU,eAAM,CAACC,QAAQ,CAACX,UAAU;AAElFN,WAAWc,OAAO,CAACI,gBAAgB,GAAG,SAAUZ,QAAgB;IAC9D,OAAOU,eAAM,CAACG,WAAW,CAACb,UAAU,IAAI,CAACA,QAAQ;AACnD;iBAESc,iBAAQ,CAACC,KAAK,CAAC,QAAQrB"}