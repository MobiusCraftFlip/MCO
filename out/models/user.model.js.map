{"version":3,"sources":["../../src/models/user.model.ts"],"sourcesContent":["import mongoose, { Schema, Types } from \"mongoose\"\nimport bcrypt from \"bcrypt\"\nimport {render} from \"ejs\"\n\nexport interface IUserSchema {\n  name: string,\n  username: string,\n  email: string,\n  password: string,\n  description: string,\n\n  roblox_id: string,\n  roblox_username: string,\n  roblox_displayname: string,\n\n\n  discord_id: string,\n  discord_username: string,\n  discord_displayname: string,\n\n  flags: string[],\n}\n\nlet userSchema = new Schema<IUserSchema>({\n  name: String,\n  username: String,\n  description: String,\n  email: String,\n  password: String,\n\n  roblox_id: String,\n  roblox_username: String,\n  roblox_displayname: String,\n\n\n  discord_id: String,\n  discord_username: String,\n  discord_displayname: String,\n\n  flags: [String],\n})\n\n// Methods\nuserSchema.methods.generateHash = (password: string) => bcrypt.hashSync(password, 10)\n\nuserSchema.methods.validatePassword = function (password: string) {\n  return bcrypt.compareSync(password, this.password)\n}\n\n\n// const textInput = (name: string, value?: string) => `<b>${\"\"}</b><input class=\"input\" type=\"text\" name=${name} value=\"${value ? value :  \"\"}\"></input>`\nconst textInput = (name: string, value?: string) => render(`<b>${visableNames[name]}</b><input class=\"input\" type=\"text\" name=\"<%= name %>\" value=\"<%= value ? value :  ''%>\"></input>`, {name,value})\n\nexport const user_editable = {\n  description: (u) => textInput(\"description\", u.description)\n} as {[key: string]: (u: IUserSchema) => string}\n\nexport const user_viewable = {\n  email: \"Email\",\n  roblox_id: \"\"\n}\n\nexport const sudo_editable = {\n  description: (u) => textInput(\"description\", u.description),\n  email: (u) => textInput(\"email\", u.email),\n  roblox_id: (u) => textInput(\"roblox_id\", u.roblox_id),\n  roblox_username: (u) => textInput(\"roblox_username\", u.roblox_username),\n  roblox_displayname: (u) => textInput(\"roblox_displayname\", u.roblox_displayname),\n  discord_id: (u) => textInput(\"discord_id\", u.discord_id),\n  discord_username: (u) => textInput(\"discord_username\", u.discord_username),\n  discord_displayname: (u) => textInput(\"discord_displayname\", u.discord_displayname),\n  flags: () => \"\",\n} as {[key: string]: (u: IUserSchema) => string}\n\nexport const visableNames = {\n  name: \"Name\",\n  username: \"Username\",\n  description: \"Bio\",\n  email: \"Email\",\n  password: \"Password\",\n\n  roblox_id: \"Roblox UserID\",\n  roblox_username: \"Roblox Username\",\n  roblox_displayname: \"Roblox Displayname\",\n\n\n  discord_id: \"Discord Userid\",\n  discord_username: \"Discord Username\",\n  discord_displayname: \"Discord Displayname\",\n\n  flags: \"Flags\",\n} as  {[key: string]: string}\n\nfunction memorise<A,R>(func: (n: A) => Promise<R>)  {\n  const results : {[key:string]: R}= {};\n  return async (args: A) => {\n    const argsKey = JSON.stringify(args);\n    if (!results[argsKey]) {\n      results[argsKey] = await func(args);\n    }\n    return results[argsKey];\n  };\n};\n\nconst UserModel = mongoose.model(\"user\", userSchema)\n\nconst getUsernameFromId = memorise(async (id: string | Types.ObjectId) => {\n  return (await UserModel.findById(id).exec())?.username\n})\n\nexport {getUsernameFromId}\n\nexport default UserModel"],"names":["getUsernameFromId","sudo_editable","user_editable","user_viewable","visableNames","userSchema","Schema","name","String","username","description","email","password","roblox_id","roblox_username","roblox_displayname","discord_id","discord_username","discord_displayname","flags","methods","generateHash","bcrypt","hashSync","validatePassword","compareSync","textInput","value","render","u","memorise","func","results","args","argsKey","JSON","stringify","UserModel","mongoose","model","id","findById","exec"],"mappings":";;;;;;;;;;;IAgHA,OAAwB;eAAxB;;IAFQA,iBAAiB;eAAjBA;;IAhDKC,aAAa;eAAbA;;IATAC,aAAa;eAAbA;;IAIAC,aAAa;eAAbA;;IAiBAC,YAAY;eAAZA;;;kEA1E2B;+DACrB;qBACE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBrB,IAAIC,aAAa,IAAIC,gBAAM,CAAc;IACvCC,MAAMC;IACNC,UAAUD;IACVE,aAAaF;IACbG,OAAOH;IACPI,UAAUJ;IAEVK,WAAWL;IACXM,iBAAiBN;IACjBO,oBAAoBP;IAGpBQ,YAAYR;IACZS,kBAAkBT;IAClBU,qBAAqBV;IAErBW,OAAO;QAACX;KAAO;AACjB;AAEA,UAAU;AACVH,WAAWe,OAAO,CAACC,YAAY,GAAG,CAACT,WAAqBU,eAAM,CAACC,QAAQ,CAACX,UAAU;AAElFP,WAAWe,OAAO,CAACI,gBAAgB,GAAG,SAAUZ,QAAgB;IAC9D,OAAOU,eAAM,CAACG,WAAW,CAACb,UAAU,IAAI,CAACA,QAAQ;AACnD;AAGA,0JAA0J;AAC1J,MAAMc,YAAY,CAACnB,MAAcoB,QAAmBC,IAAAA,WAAM,EAAC,CAAC,GAAG,EAAExB,YAAY,CAACG,KAAK,CAAC,kGAAkG,CAAC,EAAE;QAACA;QAAKoB;IAAK;AAE7L,MAAMzB,gBAAgB;IAC3BQ,aAAa,CAACmB,IAAMH,UAAU,eAAeG,EAAEnB,WAAW;AAC5D;AAEO,MAAMP,gBAAgB;IAC3BQ,OAAO;IACPE,WAAW;AACb;AAEO,MAAMZ,gBAAgB;IAC3BS,aAAa,CAACmB,IAAMH,UAAU,eAAeG,EAAEnB,WAAW;IAC1DC,OAAO,CAACkB,IAAMH,UAAU,SAASG,EAAElB,KAAK;IACxCE,WAAW,CAACgB,IAAMH,UAAU,aAAaG,EAAEhB,SAAS;IACpDC,iBAAiB,CAACe,IAAMH,UAAU,mBAAmBG,EAAEf,eAAe;IACtEC,oBAAoB,CAACc,IAAMH,UAAU,sBAAsBG,EAAEd,kBAAkB;IAC/EC,YAAY,CAACa,IAAMH,UAAU,cAAcG,EAAEb,UAAU;IACvDC,kBAAkB,CAACY,IAAMH,UAAU,oBAAoBG,EAAEZ,gBAAgB;IACzEC,qBAAqB,CAACW,IAAMH,UAAU,uBAAuBG,EAAEX,mBAAmB;IAClFC,OAAO,IAAM;AACf;AAEO,MAAMf,eAAe;IAC1BG,MAAM;IACNE,UAAU;IACVC,aAAa;IACbC,OAAO;IACPC,UAAU;IAEVC,WAAW;IACXC,iBAAiB;IACjBC,oBAAoB;IAGpBC,YAAY;IACZC,kBAAkB;IAClBC,qBAAqB;IAErBC,OAAO;AACT;AAEA,SAASW,SAAcC,IAA0B;IAC/C,MAAMC,UAA6B,CAAC;IACpC,OAAO,OAAOC;QACZ,MAAMC,UAAUC,KAAKC,SAAS,CAACH;QAC/B,IAAI,CAACD,OAAO,CAACE,QAAQ,EAAE;YACrBF,OAAO,CAACE,QAAQ,GAAG,MAAMH,KAAKE;QAChC;QACA,OAAOD,OAAO,CAACE,QAAQ;IACzB;AACF;AAEA,MAAMG,YAAYC,iBAAQ,CAACC,KAAK,CAAC,QAAQlC;AAEzC,MAAML,oBAAoB8B,SAAS,OAAOU;IACxC,OAAQ,CAAA,MAAMH,UAAUI,QAAQ,CAACD,IAAIE,IAAI,EAAC,GAAIjC;AAChD;MAIA,WAAe4B"}